{"version":3,"sources":["redux/reducers/allReducers.js","redux/reducers/postReducer.js","redux/reducers/commentsReducer.js","redux/reducers/currentPostReducer.js","redux/reducers/toggleModalReducer.js","redux/store/store.js","redux/actions/postAction.js","api/apiAllPosts.js","redux/actions/commentsAction.js","api/apiComments.js","redux/actions/currentPostAction.js","redux/actions/toggleModalAction.js","Modal/Modal.jsx","AllPostsViewComponents/AllPostsViewComponents.jsx","AllPostComponent/AllPostComponent.jsx","CurrentPostView/CurrentPostViewComponent.jsx","CommentsComponent/CommentsComponent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","post","state","action","type","data","comment","currentPost","showModal","DevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","compose","applyMiddleware","thunk","fetchData","dispatch","axios","get","then","arrOfData","catch","err","console","log","addInfoForPost","addOneComment","fetchDataComment","addInfoForComment","selectCurrentPost","toggleModal","StyledOverlay","styled","div","StyledModal","StyledForm","form","StyledButtonDel","button","StyledButtonSave","connect","modalToggle","handlerChange","createPost","postTitle","postText","postAuthor","editArticle","isEdit","onDoubleClick","onClick","onSubmit","value","name","required","onChange","StyledHeader","StyledButton","StyledCover","StyledItem","StyledBtnCover","StyledBtn","posts","deletePost","openCurrentPost","showPostInfoInModal","map","el","key","id","author","title","body","date","to","AllPostComponent","postDate","moment","format","editId","componentDidMount","props","e","setState","target","a","preventDefault","item","Math","round","random","delete","editPostObj","find","Number","put","this","Component","StyledCurrentPost","StyledInput","input","comments","addComment","inputComment","CommentsComponent","filter","postId","App","exact","path","render","withRouter","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdac8828.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport post from './postReducer';\nimport comment from './commentsReducer';\nimport currentPost from './currentPostReducer';\nimport showModal from './toggleModalReducer';\n\nconst rootReducer = combineReducers({\n  post,\n  comment,\n  currentPost,\n  showModal,\n});\n\nexport default rootReducer;\n","export default function post(state = [], action) {\n  switch (action.type) {\n    case 'addInfoForPost':\n      return [...action.data];\n    default:\n      return state;\n  }\n}\n","export default function comment(state = [], action) {\n  switch (action.type) {\n    case 'addInfoForComment':\n      return [...action.data];\n    case 'addOneComment':\n      return [...state, action.data];\n    default:\n      return state;\n  }\n}\n","export default function currentPost(state = '', action) {\n  switch (action.type) {\n    case 'selectCurrentPost':\n      return action.data;\n    default:\n      return state;\n  }\n}\n","export default function toggleModal(state = false, action) {\n  switch (action.type) {\n    case 'toggleModal':\n      return !state;\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/allReducers';\n\nconst DevTools =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n    DevTools,\n  ),\n);\n\nexport default store;\n","import getArrOfPosts from '../../api/apiAllPosts';\n\nexport const addInfoForPost = data => {\n  return {\n    type: 'addInfoForPost',\n    data,\n  };\n};\n\nexport const fetchData = () => dispatch => {\n  return getArrOfPosts()\n    .then(data => dispatch(addInfoForPost(data)))\n    .catch(err => console.log(err));\n};\n","import axios from 'axios';\n\nexport default function getArrOfPosts() {\n  return axios\n    .get('https://simple-blog-api.crew.red/posts')\n    .then(arrOfData => arrOfData.data)\n    .catch(err => console.log(err));\n}\n","import getArrOfComments from '../../api/apiComments';\n\nexport const addInfoForComment = data => {\n  return {\n    type: 'addInfoForComment',\n    data,\n  };\n};\n\nexport const addOneComment = data => {\n  return {\n    type: 'addOneComment',\n    data,\n  };\n};\n\nexport const fetchDataComment = () => dispatch => {\n  return getArrOfComments()\n    .then(data => dispatch(addInfoForComment(data)))\n    .catch(err => console.log(err));\n};\n","import axios from 'axios';\n\nexport default function getArrOfComments() {\n  return axios\n    .get('https://simple-blog-api.crew.red/comments')\n    .then(arrOfData => arrOfData.data)\n    .catch(err => console.log(err));\n}\n","export const selectCurrentPost = data => {\n  return {\n    type: 'selectCurrentPost',\n    data,\n  };\n};\n","export const toggleModal = () => {\n  return {\n    type: 'toggleModal',\n  };\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { toggleModal } from '../redux/actions/toggleModalAction';\n\nconst StyledOverlay = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nconst StyledModal = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 600px;\n  height: 180px;\n  border-radius: 10px;\n  background-color: #fff;\n  padding: 10px;\n`;\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  input {\n    width: 100%;\n  }\n`;\n\nconst StyledButtonDel = styled.button`\n  display: block;\n  margin-left: auto;\n  border: none;\n  background: #fff;\n`;\nconst StyledButtonSave = styled.button`\n  display: block;\n  width: 50px;\n  margin: 5px auto;\n  border-radius: 5px;\n`;\nconst Modal = ({\n  modalToggle,\n  handlerChange,\n  createPost,\n  postTitle,\n  postText,\n  postAuthor,\n  editArticle,\n  isEdit,\n}) => {\n  return (\n    <StyledOverlay onDoubleClick={modalToggle}>\n      <StyledModal>\n        <StyledButtonDel onClick={modalToggle}>X</StyledButtonDel>\n        <StyledForm onSubmit={isEdit ? editArticle : createPost}>\n          <label>\n            Post title:\n            <input\n              type=\"text\"\n              value={postTitle}\n              name=\"postTitle\"\n              required\n              onChange={handlerChange}\n            />\n          </label>\n          <label>\n            Post text:\n            <input\n              type=\"text\"\n              value={postText}\n              name=\"postText\"\n              required\n              onChange={handlerChange}\n            />\n          </label>\n          <label>\n            Author of post:\n            <input\n              type=\"text\"\n              value={postAuthor}\n              name=\"postAuthor\"\n              required\n              onChange={handlerChange}\n            />\n          </label>\n          <StyledButtonSave type=\"submit\">Save</StyledButtonSave>\n        </StyledForm>\n      </StyledModal>\n    </StyledOverlay>\n  );\n};\n\nfunction MDTP(dispatch) {\n  return {\n    modalToggle() {\n      dispatch(toggleModal());\n    },\n  };\n}\n\nexport default connect(\n  null,\n  MDTP,\n)(Modal);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { toggleModal } from '../redux/actions/toggleModalAction';\n\nconst StyledHeader = styled.div`\n  background: #000;\n  padding: 20px;\n`;\nconst StyledButton = styled.button`\n  display: block;\n  width: 100px;\n  height: 20px;\n  margin: auto;\n  border: 1px solid black;\n  background: #fff;\n  border-radius: 5px;\n`;\nconst StyledCover = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 20px;\n`;\nconst StyledItem = styled.div`\n  width: 300px;\n  background: #ccc;\n  padding: 20px;\n  border: 1px solid black;\n  border-radius: 10px;\n  margin-bottom: 20px;\n  h3,\n  h5,\n  p {\n    text-align: center;\n    margin-bottom: 10px;\n  }\n`;\nconst StyledBtnCover = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\nconst StyledBtn = styled.button`\n  display: block;\n  border: 1px solid black;\n  padding: 5px;\n  border-radius: 100%;\n  background-color: #fff;\n`;\n\nconst AllPostsViewComponents = ({\n  posts,\n  modalToggle,\n  deletePost,\n  openCurrentPost,\n  showPostInfoInModal,\n  currentPost,\n}) => {\n  return (\n    <div>\n      <StyledHeader>\n        <StyledButton onClick={modalToggle}>Add new post</StyledButton>\n      </StyledHeader>\n      <StyledCover>\n        {posts.map(el => (\n          <StyledItem key={el.id}>\n            <StyledBtnCover>\n              <StyledBtn id={el.id} onClick={showPostInfoInModal}>\n                Edit\n              </StyledBtn>\n              <StyledBtn id={el.id} onClick={deletePost}>\n                X\n              </StyledBtn>\n            </StyledBtnCover>\n            <h3>Author: {el.author}</h3>\n            <h3>{el.title}</h3>\n            <p>{el.body}</p>\n            <p>{el.date}</p>\n            <StyledButton>\n              <NavLink\n                to={`/posts/:${currentPost.id}`}\n                id={el.id}\n                onClick={openCurrentPost}\n              >\n                Open post\n              </NavLink>\n            </StyledButton>\n          </StyledItem>\n        ))}\n      </StyledCover>\n    </div>\n  );\n};\n\nfunction MSTP(state) {\n  return {\n    posts: state.post,\n    currentPost: state.currentPost,\n  };\n}\n\nfunction MDTP(dispatch) {\n  return {\n    modalToggle() {\n      dispatch(toggleModal());\n    },\n  };\n}\n\nexport default connect(\n  MSTP,\n  MDTP,\n)(AllPostsViewComponents);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { fetchData } from '../redux/actions/postAction';\nimport { fetchDataComment } from '../redux/actions/commentsAction';\nimport { selectCurrentPost } from '../redux/actions/currentPostAction';\nimport { toggleModal } from '../redux/actions/toggleModalAction';\nimport Modal from '../Modal/Modal';\nimport AllPostsViewComponents from '../AllPostsViewComponents/AllPostsViewComponents';\n\nclass AllPostComponent extends Component {\n  state = {\n    postTitle: '',\n    postText: '',\n    postAuthor: '',\n    postDate: moment().format('LLL'),\n    isEdit: false,\n    editId: '',\n  };\n\n  componentDidMount = () => {\n    this.props.fetchData();\n    this.props.fetchDataComment();\n  };\n\n  handlerChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  createPost = async e => {\n    e.preventDefault();\n    const item = {\n      title: this.state.postTitle,\n      body: this.state.postText,\n      author: this.state.postAuthor,\n      id: Math.round(Math.random() * 10000),\n      date: this.state.postDate,\n    };\n    await this.setState({\n      postTitle: '',\n      postText: '',\n      postAuthor: '',\n    });\n    await axios.post('https://simple-blog-api.crew.red/posts', { ...item });\n    this.props.toggleModal();\n    this.props.fetchData();\n  };\n\n  deletePost = async e => {\n    const { id } = e.target;\n    await axios.delete(`https://simple-blog-api.crew.red/posts/${id}`);\n    this.props.fetchData();\n  };\n\n  showPostInfoInModal = async e => {\n    const { id } = e.target;\n    const editPostObj = this.props.posts.find(el => el.id === Number(id));\n    await this.setState({\n      postTitle: editPostObj.title,\n      postText: editPostObj.body,\n      postAuthor: editPostObj.author,\n      postDate: editPostObj.date,\n      isEdit: true,\n      editId: id,\n    });\n    this.props.toggleModal();\n  };\n\n  editArticle = async e => {\n    e.preventDefault();\n    const id = this.state.editId;\n    const item = {\n      title: this.state.postTitle,\n      body: this.state.postText,\n      author: this.state.postAuthor,\n      date: this.state.postDate,\n      id,\n    };\n    await this.setState({\n      postTitle: '',\n      postText: '',\n      postAuthor: '',\n      isEdit: false,\n      editId: '',\n    });\n    await axios.put(`https://simple-blog-api.crew.red/posts/${id}`, {\n      ...item,\n    });\n    await this.props.fetchData();\n    this.props.toggleModal();\n  };\n\n  openCurrentPost = e => {\n    const id = Number(e.target.id);\n    const currentPost = this.props.posts.find(el => el.id === id);\n    this.props.selectCurrentPost(currentPost);\n  };\n\n  render() {\n    const {\n      deletePost,\n      openCurrentPost,\n      editArticle,\n      showPostInfoInModal,\n      handlerChange,\n      createPost,\n    } = this;\n    const { postTitle, postText, postAuthor, isEdit } = this.state;\n    const { showModal } = this.props;\n    return (\n      <div>\n        {showModal && (\n          <Modal\n            handlerChange={handlerChange}\n            createPost={createPost}\n            postTitle={postTitle}\n            postText={postText}\n            postAuthor={postAuthor}\n            editArticle={editArticle}\n            isEdit={isEdit}\n          />\n        )}\n        <AllPostsViewComponents\n          deletePost={deletePost}\n          openCurrentPost={openCurrentPost}\n          showPostInfoInModal={showPostInfoInModal}\n        />\n      </div>\n    );\n  }\n}\n\nfunction MSTP(state) {\n  return {\n    posts: state.post,\n    showModal: state.showModal,\n  };\n}\n\nfunction MDTP(dispatch) {\n  return {\n    fetchData() {\n      dispatch(fetchData());\n    },\n    fetchDataComment() {\n      dispatch(fetchDataComment());\n    },\n    selectCurrentPost(data) {\n      dispatch(selectCurrentPost(data));\n    },\n    toggleModal() {\n      dispatch(toggleModal());\n    },\n  };\n}\nexport default connect(\n  MSTP,\n  MDTP,\n)(AllPostComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst StyledHeader = styled.div`\n  background-color: #000;\n  padding: 20px;\n`;\nconst StyledButton = styled.button`\n  display: block;\n  width: 100px;\n  height: 20px;\n  margin: auto;\n  border: 1px solid black;\n  background: #fff;\n  border-radius: 5px;\n`;\nconst StyledCurrentPost = styled.div`\n  display: block;\n  width: 400px;\n  margin: auto;\n  h2,\n  h3,\n  h5,\n  p,\n  li {\n    text-align: center;\n    padding: 10px 0;\n  }\n`;\nconst StyledInput = styled.input`\n  display: block;\n  width: 200px;\n  margin: 0 auto 10px;\n`;\n\nconst CurrentPostViewComponent = ({\n  currentPost,\n  comments,\n  addComment,\n  inputComment,\n  handlerChange,\n}) => {\n  return (\n    <div>\n      <StyledHeader>\n        <StyledButton>\n          <NavLink to=\"/\">To all posts</NavLink>\n        </StyledButton>\n      </StyledHeader>\n      <StyledCurrentPost>\n        <h3>Author: {currentPost.author}</h3>\n        <h5>{currentPost.date}</h5>\n        <h2>{currentPost.title}</h2>\n        <p>{currentPost.body}</p>\n        <h3>Comments</h3>\n        <ul>\n          {comments.map(el => (\n            <li key={el.id}>{el.body}</li>\n          ))}\n        </ul>\n        <form onSubmit={addComment}>\n          <StyledInput\n            type=\"text\"\n            name=\"inputComment\"\n            value={inputComment}\n            onChange={handlerChange}\n            required\n          />\n          <StyledButton type=\"submit\">Add comment</StyledButton>\n        </form>\n      </StyledCurrentPost>\n    </div>\n  );\n};\n\nfunction MSTP(state) {\n  return {\n    currentPost: state.currentPost,\n  };\n}\n\nexport default connect(\n  MSTP,\n  null,\n)(CurrentPostViewComponent);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { addOneComment } from '../redux/actions/commentsAction';\nimport CurrentPostVievComponent from '../CurrentPostView/CurrentPostViewComponent';\n\nclass CommentsComponent extends Component {\n  state = {\n    inputComment: '',\n    comments:\n      this.props.comment.filter(\n        el => el.postId === this.props.currentPost.id,\n      ) || [],\n  };\n\n  handlerChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  addComment = async e => {\n    e.preventDefault();\n    const item = {\n      body: this.state.inputComment,\n      postId: this.props.currentPost.id,\n      id: Math.round(Math.random() * 10000),\n    };\n    await axios.post('https://simple-blog-api.crew.red/comments', { ...item });\n    await this.props.addOneComment(item);\n    await this.setState({\n      inputComment: '',\n      comments:\n        this.props.comment.filter(\n          el => el.postId === this.props.currentPost.id,\n        ) || [],\n    });\n  };\n\n  render() {\n    const { inputComment, comments } = this.state;\n    const { addComment, handlerChange } = this;\n    return (\n      <CurrentPostVievComponent\n        addComment={addComment}\n        inputComment={inputComment}\n        comments={comments}\n        handlerChange={handlerChange}\n      />\n    );\n  }\n}\n\nfunction MSTP(state) {\n  return {\n    comment: state.comment,\n    currentPost: state.currentPost,\n  };\n}\n\nfunction MDTP(dispatch) {\n  return {\n    addOneComment(data) {\n      dispatch(addOneComment(data));\n    },\n  };\n}\n\nexport default connect(\n  MSTP,\n  MDTP,\n)(CommentsComponent);\n","import React, { Component } from 'react';\nimport { Switch, Route, withRouter } from 'react-router-dom';\nimport AllPostComponent from './AllPostComponent/AllPostComponent';\nimport CommentsComponent from './CommentsComponent/CommentsComponent';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" render={() => <AllPostComponent />} />\n        <Route path=\"/posts/:id\" render={() => <CommentsComponent />} />\n      </Switch>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './redux/store/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>{' '}\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}